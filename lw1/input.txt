СТРУКТУРЫ И АЛГОРИТМЫ ОБРАБОТКИ ДАННЫХ 



Дан комплекс вопросов, связанных с выполнением лабораторных 
работ по дисциплине "Структуры и алгоритмы обработки данных в 
ЭВМ". Определены цели и содержание работы, приведены варианты 
заданий, разобраны примеры программ, ориентированных на 
применение различных структур данных. 


1. СОДЕРЖАНИЕ ЛАБОРАТОРНЫХ РАБОТ 

В течение семестра студенты выполняют пять лабораторных 
работ: "Текстовые файлы", "Линейные списки", "Деревья", 
"Графы", "Поиск и сортировка данных", ориентированные на 
применение основных структур данных. 
Выполнение лабораторных работ включает этапы выбора 
структуры данных, алгоритмизации задачи, составления, 
тестирования и отладки программы. Методические рекомендации по 
всем зтим этапам приведены в [1-3,7]. 
Определение, способы представления и примеры применения 
указанных структур данных приведены в [3-6]. 


2. ВАРИАНТЫ ЗАДАНИЙ ДЛЯ ЛАБОРАТОРНЫХ РАБОТ 

2.1. Текстовые файлы 

Общими требованиями к лабораторной работе являются: 
1) указывать имена входного и выходного файлов через 
командную строку или с клавиатуры в процессе работы программы; 
2) обрабатывать ошибки открытия файлов; 
3) не использовать стандартные функции работы со строками 
(типа COPY, POS из ПАСКАЛя); 
4) не переписывать файл в оперативную память целиком. 

1. Имеется текстовый файл. Разработать программу, 
обеспечивающую вставку запятой перед словами "который", 
"которая", "которое", "которые", если они не являются первым 
словом предложения (6). 

2. Текстовый файл содержит последовательность целых чисел, 
разделенных произвольным количеством других символов. Числа 
могут переходить со строки на строку. Требуется найти сумму 
чисел (6). 
3. Имеется текстовый файл с некоторым описанием. Переносы
слов разрешены. Выдать информацию о том, сколько раз 
встречается в тексте каждое слово (6). 
 ----------------------
4. Каждая строка текстового файла имеет следующую 
структуру:

и определить группы с наибольшим и наименьшим средним баллом 
(6). 

5. Задан текстовый файл. Переносов слов нет. Создать новый 
файл, в котором каждое слово будет записано в обратном порядке 
(6). 

6. Дан текстовый файл и ключевое слово для поиска. Выдать 
на экран 5 строк файла, начиная с первой строки, включающей 
заданное слово. Выделить ключевое слово курсором или 
подсветкой (6). 

7. Дан текстовый файл и два слова. Переносов слов нет. 
Получить новый файл, в котором все вхождения первого слова 
заменены на второе слово (6). 

8. Имеется два текстовых файла. В первом из них содержится 
некоторое описание. Переносы слов допускаются. Второй файл 
содержит список слов, не подлежащих разглашению. Требуется 
переписать первый файл, заменив каждое из подобных слов 
точками (6). 

9. Имеется текстовый файл с некоторым описанием. Все 
предложения заканчиваются точкой. Требуется проверить, 
является ли первая буква каждого предложения прописной. 
Исправить обнаруженные ошибки (6). 

10. Имеется текстовый файл с некоторым описанием. Переносов 
слов нет. Требуется каждые 3 предложения выделить в отдельный 
абзац. Каждое предложение может заканчиваться точкой, 
вопросительным либо восклицательным знаком (6). 

11. Некоторый текст состоит из нескольких частей, 
записанных в отдельных файлах. Имена этих файлов и общий 
заголовок текста указаны в отдельном файле. Создать файл с 
полным текстом. Заголовок должен содержаться в центре первой 
строки (6). 

12. В текстовом файле специальные термины выделены 
кавычками. Переписать файл так, чтобы термины выделялись 
прописными буквами (6). 

13. Имеется текстовый файл, в котором специальные термины 
выделены прописнами
 
буквами. Каждый специальный термин 
содержит не менее двух букв. Переписать файл так, чтобы 
термины были набраны строчными буквами в кавычках (6). 

14. Имеется кабак текст документа, состоящий из нескольких
параграфов. Каждый параграф начинается с заголовка и отделен 
пустой строкой от предыдущего параграфа. Текст разделен на 
страницы. Номер страницы проставлен в ее начале и выделен с 
обеих сторон знаком '-'. Сформировать файл с оглавлением 
документа (7). 

15. В некоторых строках текстового файла имеются выражения, 
состоящие из двух целых чисел, разделенных знаком 
арифметической операции ('+', Кабак '-','*','/'). Первое из чисел
может быть отрицательным. В строке может содержаться несколько 
выражений. Перед выражением и после него могут находиться 
произвольные символы. Требуется выделить строку, в которой 
значение выражения максимально. Вывести найденное максимальное 
значение (7). миллим,

16. Дан текстовый файл. Произвести его шифрацию по 
следующим правилам: 
1) символы с кодами 1-31,243-255 не менять, т.к. они мо- 
гут играть роль служебных; 
2) шифровать текст блоками по 32 байта; 
3) коды символов 32-242 зашифровать по формулам 
a[n]=((243-n+m) mod 211)+32 
m=(3*k-1) mod 99 , где 
n-исходный код символа; 
a[n]-зашифрованный код; 
k-порядковый номер блока. 
Как произвести дешифрацию текста (7)? 

17. Придумать систему шифрации текста. Символы с кодами 
1-31,243-255 не менять, т.к. они могут играть роль служебных. 
Написать программу шифрации-дешифрации текстового файла. Шифр 
не должен быть основан на однозначной замене каждого символа 
другим по всему тексту (7). 

18. В файле записан текст стихотворения. Форматировать 
текст так, чтобы каждый куплет из 4 строк следовал с одной и 
той же позиции, начинался с прописной буквы и был сдвинут 
относительно предыдущего куплета на 5 позиций вправо или влево 
поочередно (7). 

19. Имеется файл с текстом на русском языке без переносов 
слов. Дать все варианты переноса всех слов текста. Например, 
все варианты переноса слова "барабан" можно представить как 
ба-р-а-б-ан. Перенос возможен по следующим правилам: 
1) переносится либо остается в конце строки не менее двух 
символов; 
2) невозможен перенос перед буквами 'ь' и 'ъ'; 
3) слово должно иметь не менее двух слогов; 
4) в оставшейся и переносимой частях слова должны быть 
гласные буквы (8). 

20. Составить программу перевода вещественного числа в форму 
константы с плавающей точкой в строковом формате. Целая часть 
мантиссы должна состоять из одной цифры (8). 

21. Строки текстового файла содержат фамилии студентов. 
Определить порядковый номер байта, начиная с которого 
располагается первая по алфавиту фамилия. Заменить данную 
фамилию в исходном файле символами '*', не переписывая этого 
файла (8). 

22. В текстовом файле записан отдельный абзац. Переносов 
слов нет. Выровнять строки абзаца по ширине. Иными словами, 
правые границы строк выравниваются по заданной позиции за счет 
вставки дополнительных пробелов между словами. Первая строка 
абзаца должна иметь заданный отступ, а остальные строки должны 
начинаться с первой позиции. Последняя строка абзаца по 
правому краю не выравнивается. Число строк в исходном и 
конечном файлах может отличаться (8). 

23. Разработать программу перекодировки текстового файла из 
одной системы кодировки в другую и обратно. Система кодировки 
должна содержаться в отдельном файле (8). 

24. В текстовом файле записан отдельный абзац. Некоторые 
слова перенесены со строки на следующую строку. Знак переноса 
'-'. Выровнять строки абзаца по ширине. Иными словами, правые 
границы строк выравниваются по заданной позиции за счет 
вставки дополнительных пробелов между словами. Первая строка 
абзаца должна иметь заданный отступ, а остальные строки должны 
начинаться с первой позиции. Последняя строка абзаца по 
правому краю не выравнивается. Число строк в исходном и 
конечном файлах может отличаться (9). 

25. Задан текстовый файл. Каждая строка содержит не более 
255 символов. Создать новый файл, в котором строки будут 
следовать в обратном порядке. Размер файла не
 
ограничивается 
(9). 

26. В текстовом файле задан словарь слов. Вводится некоторое 
слово. Требуется составить из букв этого слова максимальное 
количество других слов, которые имеются в словаре. Каждая буква 
заданного слова может использоваться только один раз. Например, 
если в заданном слове имеется две буквы 'а', то слова словаря, 
в которых больше двух букв 'а', не подходят (9). 

27. Задан текстовый файл. Требуется выдать все палиндромы 
из максимального количества букв. Палиндромом называется слово, 
которое читается одинаково слева направо и справа налево (9). 

28. Вступительные испытания в некоторый вуз состоят из трех 
экзаменов: математика (максимальный балл – 9), информатика 
(максимальный балл – 9), литература (максимальный балл – 5). В 
текстовом вход имеются сведения о сдаче абитуриентами этих 
экзаменов. Строки файла имеют следующий формат: 
<Фамилия> <оценка1> <оценка2> <оценка3>, где <Фамилия> –строка, 
состоящая не более, чем из 20 символов, оценки – числа от 0 до 
максимальной оценки по предмету соответственно. Ноль ставится в 
случае, если экзамен не сдавался, например, после полученной на 
предыдущем экзамене двойки. Все баллы, большие 2, считаются 
удовлетворительными). Пример входных строк: 
Иванов 8 9 3 
Петров 2 0 0 
Задается количество мест K, на которые претендуют абитуриенты. 
Требуется определить список абитуриентов с полупроходным баллом 
или сообщить, что такой балл отсутствует. Полупроходным 
считается такой балл, что лишь часть абитуриентов, набравших 
этот балл и не получивших ни одной неудовлетворительной оценки, 
попадает в K лучших, которые должны быть зачислены (9). 

29. В текстовом файле имеются сведения о сдаче экзаменов 
некоторыми учениками. Каждая из строк имеет следующий формат: 
<Фамилия> <Имя> <оценки>, где <Фамилия> – строка, состоящая не 
более чем из 20 символов, <Имя> – строка, состоящая не более 
чем из 15 символов <оценки> – три целых числа через пробел, по 
пятибалльной системе. <Фамилия> и <Имя>, а также <Имя> и 
<оценки> разделены пробелами. Пример входной строки: 
Иванов Петр 4 5 4 
Вывести в файл фамилии и имена трех лучших по среднему баллу 
учеников. Если среди остальных есть ученики, набравшие тот же 
средний балл, что и один из трех лучших, то следует вывести и 
их фамилии и имена. Требуемые имена и фамилии можно выводить в 
произвольном порядке (9). 

30. В текстовом файле имеется некоторое информационнное 
письмо. Требуется сформировать ответ на письмо. Если последнее 
предложение письма является вопросом, начинающимся со слова 
"кто", то слово "кто" заменяется словами "конь в пальто", а 
знак вопроса заменяется на знак восклицания. В противном случае 
нужно дать ответ: "Спасибо за информацию" (9). 

2.2. Линейные списки 

Общими требованиями к лабораторной работе являются: 
1) организовать ввод данных из файла в понятной для 
пользователя форме; 
2) обеспечить возможность многократных запросов без 
повторного запуска программы. 

1. Автомобильная стоянка вмещает N машин и имеет одну 
полосу с единственным въездом-выездом. Если владелец приходит 
за машиной, временно выезжают и потом возвращаются в том же 
порядке все машины, загораживающие проезд. Если стоянка 
заполнена, то прибывшая машина уезжает. Задана 
последовательность номеров машин с признаками прибытия или 
убытия. Составить протокол работы стоянки, сообщая обо всех 
событиях (6). 

2. Автостоянка содержит одну полосу, на которой может быть 
размещено до N машин. Имеется план прибытия и убытия машин на 
стоянку. Если в момент прибытия стоянка оказывается занятой, 
машина уезжает восвояси. Машины въезжают с южной стороны, а 
могут выехать из K (K<N) крайних мест северной стороны. При 
выезде машины очередь сдвигается с юга на север. Требуется: 
1) промоделировать работу стоянки, последовательно сообщая 
о приходе и убытии машин с выдачей информации о стоящих 
машинах; 
2) выдать два списка номеров машин: тех, которые не смогли 
встать на стоянку, и тех, что не смогли выехать вовремя (6). 

3. Составить программу работы с циклической очередью, 
организованной с помощью
 
массива. Обеспечить операции 
постановки в очередь, продвижения очереди, вставки в середину 
после элемента с заданным ключом и удаления из середины (6). 

4. Два стека размещены в одном массиве и растут навстречу 
друг другу. Задана последовательность операций размещения и 
удаления элементов с указанием номера стека. Обеспечить 
выполнение данных операций и обработку аварийных ситуаций. 
Сообщить в конце: 
1) какой минимальный резерв памяти оставался в массиве в 
процессе выполнения операций; 
2) какой интервал индексов массива не использовался для 
размещения элементов (6). 

5. Две очереди размещены в одном массиве и растут навстречу 
друг другу. Задана последовательность операций размещения и 
удаления элементов с указанием номера очереди. Обеспечить 
выполнение данных операций и обработку аварийных ситуаций. 
Сообщить в конце: 
1) какой минимальный резерв памяти оставался в массиве в 
процессе выполнения операций; 
2) какой интервал индексов массива не использовался для 
размещения элементов (6). 

6. Задания для выполнения на компьютере имеют различные 
приоритеты, задаваемые цифрами от 1 до 5 (5-высший приоритет). 
Для каждого приоритета образуется отдельная очередь. Приоритет 
задания может меняться. При повышении приоритета задание 
помещается в конец другой очереди, а при понижении - в начало. 
Составить программу, обеспечивающую: 
1) выдачу общей очереди; 
2) выдачу очереди заданного приоритета; 
3) перестройку очередей при изменении приоритета (7). 

7. Перед открытием двух железнодорожных касс сформировались 
2 очереди пассажиров, причем некоторые из них находятся сразу 
в обеих очередях. Для каждого пассажира известны его места в 
очередях и необходимое время обслуживания. Если у какого-либо 
пассажира очереди подходят одновременно, то он обслуживается в 
первой кассе. Промоделировать работу касс, выдавая 
последовательно информацию об обслуживании пассажиров (7). 

8. Выборы старосты в группе студентов из M человек 
организованы по следующим правилам. Задаются целые числа N и 
K. Студенты становятся по кругу в соответствии со своими 
номерами в журнале. Начиная от N-го студента отсчитывается K-й 
студент. Счет ведется циклически по возрастанию номеров. Этот 
студент выбывает из претендентов. Начиная со следующего 
студента, процедура повторяется. Последний оставшийся студент 
становится старостой. Ввести значения M, N, K и найти номер 
старосты (7). 

9. В символьной строке записано выражение из букв и 
операций в постфиксной форме (знак операции после операндов). 
Проверить правильность записи и перевести выражение в 
инфиксную (обычную) форму со скобками. Например, выражение 
(a+b)*c-d*e записывается в постфиксной форме как ab+c*de*-. 
Требуется выдать его в виде (((a+b)*c)-(d*e)) (7). 

10. В символьной строке записано выражение из букв и 
операций в префиксной форме (знак операции перед операндами). 
Проверить правильность записи и перевести выражение в 
постфиксную форму (знак операции после операндов). При наличии 
ошибок указать место первой из них. 
Пример: выражение (a+b)*c-d*e записывается в префиксной 
форме как -*+abc*de. Требуется выдать его в виде ab+c*de*-(7). 

11. В символьной строке записано выражение из цифр и 
операций в постфиксной форме (знак операции после операндов). 
Проверить правильность записи и найти значение выражения. При 
наличии ошибок указать место первой из них. 
Пример: выражение (2+3)*4-5*6 записывается в постфиксной 
форме как 23+4*56*- (7). 

12. Имеется кольцевая очередь, заданная массивом, и стек, 
заданный с помощью указателей. Информационная часть элементов 
обеих структур идентична. Обеспечить операции включения, 
удаления, выдачи элементов стека и очереди. По требованию 
пользователя исключить из стека элементы, имеющиеся в очереди 
(7). 

13. В некотором институте приобретаемые компьютеры 
выделяются различным факультетам поочередно. В пределах 
факультетов имеются очереди из кафедр. Факультет, получивший 
компьютер, перемещается в конец очереди, а соответствующая 
кафедра исключается из факультетской очереди. Вновь
 
организованные факультеты и кафедры занимают последние места в 
соответствующих очередях. Составить программу ведения очереди 
на компьютеры (8). 

14. Данные о студенческих группах записаны в файле в 
следующем виде:
Организовать с помощью указателей размещение списка с 
данными о группах в основной памяти так, чтобы каждый элемент 
располагался один раз. Составить программу выдачи всех групп 
заданного факультета либо заданного курса без перебора всех 
элементов (8). 

15. Имеются N линейных списков, имеющих одинаковую 
структуру и упорядоченных по возрастанию некоторого ключевого 
поля. Создать общий упорядоченный список, используя имеющуюся 
частичную сортировку (8). 

16. Трассировка программы, не содержащей рекурсивных 
вызовов и повторяющихся имен процедур, распечатана в виде 
списка выполняемых процедур. Процедура попадает в список, если 
к ней произошло обращение из вызывающей процедуры либо возврат 
управления из вызванной ей процедуры. Структура программы 
такова, что каждая вызываемая процедура вложена в вызывающую 
ее процедуру. Известен объем памяти, который требуется для 
загрузки каждой процедуры. При выходе из процедуры занимаемая 
ей память освобождается. Выяснить, соответствует ли 
трассировка правильной работе программы. Определить размер 
памяти, необходимый для работы программы, и цепочку вызовов, 
требующую максимальной памяти (8). 

17. У множества шпионов, собравшихся вместе для наблюдения 
секретного объекта, имеется единственный бинокль. 
Сформировалась очередь на этот бинокль. Для каждого шпиона 
задан период наблюдения в минутах и предельное время 
нахождения в очереди. После наблюдения каждый шпион становится 
снова в конец очереди. Как только для какого-либо шпиона 
истекает предельное время нахождения в очереди, он покидает ее 
(даже если в этот момент владеет биноклем) и отправляется к 
резиденту. Вывести протокол наблюдения шпионов за объектом(9). 

18. На узловой станции необходимо менять направления 
движения всех поездов. Для этого предназначен специальный 
тупик. Зашедший в тупик последний поезд выходит из него 
первым. Известны моменты прихода поездов и минимально 
необходимое время стоянки (одинаковое для всех поездов). 
Требуется: 
1) составить расписание стоянки поездов на станции с учетом 
смены направления движения; 
2) поменять между собой моменты прихода скорых и 
пассажирских поездов так, чтобы скорые поезда имели 
минимальное суммарное время простоя в тупике (9). 

19. Организовать в основной памяти с помощью указателей 
стек из очередей. Обеспечить операции ведения очереди из 
вершины стека, расширения и сокращения стека, выдачи 
содержимого стека (9). 

20. Организовать в основной памяти с помощью указателей 
очередь из стеков. Обеспечить операции ведения стека из 
начала очереди, дополнения и продвижения очереди, выдачи 
содержимого очереди (9). 

21. Текст программы на бейсике включает циклы вида 
# FOR ID=
# NEXT ID , 
где #-числовой номер(метка); ID-идентификатор параметра цикла. 
Требуется: 
1) проверить правильность идентификаторов, задающих 
параметры циклов (не более двух символов; первый - латинская 
буква, а второй, если он имеется, - цифра); 
2) с помощью стека проверить правильность вложенности 
циклов; 
3) переписать файл с исходным текстом так, чтобы операторы 
цикла каждого последующего уровня вложения были сдвинуты на 
две позиции вправо по сравнению с предыдущим уровнем (9). 

22. На плоскости расположена система из N шестеренок, 
которая приводится в движение вращением шестеренки 1 по 
часовой стрелке. Сцепленные шестеренки могут вращаться только 
в противоположных направлениях. Требуется определить 
направление движения каждой шестеренки либо установить, что 
систему заклинит. Некоторые шестеренки могут остаться 
неподвижными (10). 

23. В некотором компиляторе ПАСКАЛя текст программы 
включает примечания, выделенные фигурными скобками '{','}' 
либо парами
 
символов '(*' и '*)'. Примечания могут быть 
вложенными друг в друга. Если примечание открыто знаком '{', 
то оно должно быть закрыто знаком '}'. Аналогично примечание, 
начинающееся с символов '(*' должно заканчиваться символами 
'*)'. Требуется: 
1) проверить правильность вложенности примечаний; 
2) переписать файл с исходным текстом так, чтобы 
отсутствовала вложенность комментариев при сохранении их 
содержания и в качестве ограничивающих символов остались 
только фигурные скобки. Учесть случай, когда символы 
примечаний находятся в апострофах (10). 

24. В строке текстового файла задано выражение из целых 
чисел и операций '+', '-', '*', '/', '^'. Порядок вычислений 
определяется приоритетом операций и круглыми скобками. Возможен 
одноместный минус в начале выражения или после открывающей 
скобки. Преобразовать выражение в постфиксную форму (алгоритм 
Дейкстры) и вычислить его значение. Показать этапы выполнения 
(11). 

25. Имеется выражение в постфиксной форме, включающее 
обращение к функциям SIN, COS, EXP. Переменные заданы одной 
строчной латинской буквой. Запросить значения переменных и 
вычислить выражение. Представить его в инфиксной форме со 
скобками. Лишние скобки присутствовать не должны (11). 

26. Программа на ПАСКАЛЕ включает такие сочетания ключевых 
слов, как REPEAT..UNTIL, RECORD..END, CASE..END и BEGIN..END. 
Некоторые части программы могут быть закомментированы, другие 
части текста могут представлять собой константы в апострофах. 
Требуется проверить правильность вложенности этих конструкций 
с учетом допустимости взаимных вложений (12). 

27. Программа на ПАСКАЛЕ включает такие сочетания ключевых 
слов, как REPEAT..UNTIL, IF..THEN..ELSE, BEGIN..END, 
RECORD..END. Конец оператора определяется точкой с запятой 
(";"). Требуется проверить правильность вложенности данных 
конструкций с учетом допустимости взаимных вложений (12). 

2.3. Деревья 

Общими требованиями к лабораторной работе являются: 
1) вводить исходное дерево из файла в понятной для 
пользователя форме, а не с клавиатуры; 
2) обрабатывать дерево в оперативной памяти, а не путем 
многократного обращения к файлу; 
3) обеспечить возможность многократных запросов без 
повторного запуска программы. 

1. Изделие задано с помощью дерева. В листьях указаны 
значения массы соответствующих деталей. Масса сборного узла 
определяется как сумма масс составляющих деталей. Требуется: 
1) рассчитать массу всего изделия; 
2) организовать обход листьев, запрашивая новые значения 
массы и сообщая, как при этом меняется масса изделия (8). 

2. Ввести произвольное сильно ветвящееся дерево. Выдать 
списки вершин: 
1) являющихся листьями; 
2) не являющихся листьями; 
3) родителей листьев; 
4) заданного уровня, считая от вершины (8). 

3. В листьях дерева, соответствующего некоторой 
конструкции, указаны минимально возможные значения массы. 
Задана предельно допустимая масса конструкции. Требуется 
определить максимально возможное значение массы для каждой 
вершины дерева (8). 

4. В листьях дерева, соответствующего некоторой 
конструкции, указаны значения массы. Масса сборного узла 
определяется как сумма масс составляющих деталей. Требуется 
определить значение массы для каждого узла конструкции, не 
превосходящего заданного уровня от вершины дерева (9). 

5. Имеется дерево, корень которого соответствует основателю 
рода. Сыновья каждой вершины задают сыновей и дочерей 
соответствующего человека. Указывается имя некоторого 
человека. Требуется выдать имена его детей, внуков, сестер и 
братьев, одного из родителей, дедушки или бабушки (9). 

7. Имеются две статьи. Каждая из них включает список 
источников. В них в свою очередь могут быть ссылки на другие 
источники. Известны год и месяц опубликования каждой статьи. 
Проверить корректность ввода информации. Определить общие 
источники двух статей, начиная с заданного года (9). 

8. Структура некоторого института задана деревом. Сыновьям 
корневой вершины соответствуют факультеты, факультеты в свою 
очередь делятся на кафедры, которые могут иметь филиалы. 
Листьям дерева
 
соответствуют преподаватели. Выявить 
преподавателей, ведущих занятия на трех и более кафедрах (10). 

9. Задано сильно ветвящееся дерево. При его вводе могли 
быть сделаны ошибки. Провести проверку на отсутствие циклов, 
то есть повторяющихся вершин. При обнаружении цикла выдать на 
экран последовательность вершин, составляющих цикл (10). 

10. Имеется план школьного сочинения, записанный с помощью 
дерева. Два друга решили написать сочинение вместе. Каждый из 
них независимо взял несколько частей, задавая их корнями 
соответствующих поддеревьев. Требуется выдать план 
неохваченной части сочинения (10). 

11. Имеется дерево, корень которого соответствует 
основателю рода. Сыновья каждой вершины задают сыновей и 
дочерей соответствующего человека. Указываются имена двух 
человек (например, А и В). Сообщить, какая из следующих 
ситуаций имеет место: 
1) А предок В; 
2) В предок А; 
3) А и В имеют ближайшего общего предка С (10). 

12. Задано бинарное дерево. Построить прошитое дерево, 
соответствующее обходу слева направо. Составить программу 
удаления поддерева с корнем в заданной вершине без повторного 
построения дерева. Конечное дерево должно оставаться прошитым. 
Выдать информацию о нитях исходного и конечного деревьев (11). 

13. В некотором институте информация об имеющихся 
компьютерах задана деревом. Сыновьям корневой вершины 
соответствуют факультеты, факультеты в свою очередь делятся 
на кафедры, кафедры могут иметь в своем составе лаборатории. 
Компьютеры могут быть установлены в общих факультетских классах, 
на кафедрах, в лабораториях и идентифицируются уникальными 
номерами. Требуется найти: 
1) факультеты с минимальным и максимальным числом компьютеров; 
2) кафедры с минимальным и максимальным числом компьютеров(11). 

14. В листьях бинарного дерева указаны идентификаторы 
переменных, в других вершинах - знаки арифметических операций 
или функции SIN, COS, TG, CTG, LOG, EXP. Возможны одноместные 
операции типа '+' или '-'. В этом случае требуется только один 
операнд. Значения переменных известны. Проверить 
синтаксическую правильность идентификаторов. Выдать на экран 
выражение в инфиксной форме со скобками. Определить значение 
выражения. 
Пример: ((-(((a1*bar)+c))-(((SIN(dors))-e)))) (11). 

15. Имеется дерево вызовов процедур некоторой программы. 
Структура программы такова, что каждая вызываемая процедура 
вложена в вызывающую ее процедуру. Задан объем памяти, который 
требуется для загрузки каждой процедуры. При выходе из 
процедуры занимаемая ей память освобождается. Известно, что 
вызов процедур при работе программы соответствовал обходу 
дерева в порядке сверху вниз. Дать трассировку программы в 
виде списка вызываемых процедур. Процедура должна попадать в 
список, если к ней произошло обращение из вызывающей процедуры 
либо возврат управления из вызванной ей процедуры. Определить 
размер памяти, необходимый для работы программы, и цепочку 
вызовов, требующую максимальной памяти (11). 

16. Задано бинарное дерево. Построить прошитое дерево, 
соответствующее обходу сверху вниз. Составить программу удале- 
ния поддерева с корнем в заданной вершине без повторного 
построения дерева. Конечное дерево должно оставаться прошитым. 
Выдать информацию о нитях исходного и конечного деревьев (12). 

17. Теннисный турнир проходит по олимпийской системе с 
выбываниями. В турнире участвуют 2^n игроков. Известен рейтинг 
каждого игрока. Чем больше рейтинг, тем выше мастерство игрока. 
В первом туре сильнейший игрок встречается со слабейшим, второй 
по рейтингу с предпоследним и т. д. Организаторы собираются и в 
дальнейшем придерживаться этого принципа, предполагая, что в 
очередной тур будет выходить сильнейшая половина игроков 
предыдущего тура. Известно, что турнир прошел в полном 
соответствии с рейтингом игроков. Требуется показать в наглядном 
виде дерево проведенного турнира (12). 

18. В некотором институте информация об имеющихся 
компьютерах задана двумя деревьями. В первом из них сыновьям 
корневой вершины соответствуют факультеты, факультеты в свою 
очередь делятся на
 
кафедры, кафедры могут иметь в своем 
составе лаборатории. Компьютеры могут быть установлены в общих 
факультетских классах, на кафедрах, в лабораториях и 
идентифицируются уникальными номерами. Во втором дереве 
сыновьям корня соответствуют учебные корпуса, корпуса включают 
списки аудиторий, а для каждой аудитории заданы номера 
находящихся в них компьютеров. Некоторые аудитории могут 
принадлежать нескольким факультетам. Выдать список таких 
аудиторий (12). 

19. Трассировка программы, не содержащей рекурсивных 
вызовов и повторяющихся имен процедур, распечатана в виде 
списка выполняемых процедур. Процедура попадает в список, если 
к ней произошло обращение из вызывающей процедуры либо возврат 
управления из вызванной ей процедуры. Структура программы 
такова, что каждая вызываемая процедура вложена в вызывающую 
ее процедуру. Начало и окончание программы должны быть в 
головной процедуре. Известен объем памяти, который требуется 
для загрузки каждой процедуры. При выходе из процедуры 
занимаемая ей память освобождается. Построить и выдать дерево 
вызовов процедур. Определить размер памяти, необходимый для 
работы программы, и цепочку вызовов, требующую максимальной 
памяти (12). 

20. Имеется некоторое алгебраическое выражение. Операнды 
заданы идентификаторами, операции выполняются по приоритетам, 
допускается использование круглых скобок. Возможны одноместные 
операции '+' и '-', а также операция возведения в степень '^'. 
Требуется построить и выдать в наглядном виде бинарное дерево, 
представляющее данное выражение (12). 

21. Информация о файлах на жестких дисках компьютера 
записана с помощью дерева. Обеспечить выполнение следующих 
операций: 
1) загрузку дерева в память из файла; 
2) обход дерева папок в режиме диалога (раскрытие папок,
подъем на уровень и т. п.); 
3) корректировку дерева при создании новых папок и файлов, 
их переименовании, копировании, переносе и удалении. 
4) сохранение дерева в файле (13). 

22. В листьях И-ИЛИ дерева, соответствующего некоторому 
множеству конструкций, заданы значения массы. Известно 
максимально допустимое значение массы изделия. Требуется усечь 
дерево так, чтобы дерево включало все элементы, 
соответствующие допустимым значениям массы, но не содержало 
"лишних" вершин. Конечное дерево выдать на экран в наглядном 
виде (14). 

23. Задано И-ИЛИ дерево, соответствующее некоторому 
множеству изделий. Требуется: 
1) найти число изделий, записанное с помощью этого дерева; 
2) если число изделий больше N, организовать усечение 
дерева в диалоге, спрашивая пользователя, какие сыновья 
ИЛИ-вершин отсекать и сообщая, как при этом сокращается число 
изделий. 
Если усекаются все сыновья ИЛИ-вершины, то отсекается она 
сама и все поддерево, висящее на сыне первой ИЛИ-вершины по 
пути к корню дерева). 
УКАЗАНИЕ: если корни нескольких поддеревьев являются 
сыновьями И-вершины, то общее число элементов равно 
произведению числа элементов поддеревьев, а если корни 
поддеревьев - сыновья ИЛИ-вершины, то общее число элементов 
находится как сумма числа элементов в поддеревьях. 
Начальное и конечное деревья выдать на экран в наглядном 
виде (14). 

24. Имеется И-ИЛИ дерево, соответствующее некоторому 
множеству конструкций. Конструктор дает два списка узлов: 
желательных и нежелательных. Требуется: 
1) усечь дерево так, чтобы дерево не содержало 
нежелательных узлов (вместе с вершиной должно отсекаться 
поддерево, висящее на сыне первой ИЛИ-вершины по пути к корню 
дерева); 
2) выбрать на оставшемся дереве все элементы с наибольшим 
количеством желательных узлов. 
Конечное дерево выдать на экран в наглядном виде (14). 

25. Теннисный турнир проходит по олимпийской системе с 
выбываниями. Известен рейтинг каждого игрока. Результаты 
турнира записаны с помощью дерева. Первоначально задается 
только список участников, которым соответствуют листья дерева. 
Требуется предложить принцип проведения турнира (выбор пар 
участников, организация предварительных туров, распределение 
или посев сильнейших игроков так, чтобы они не встречались в 
начале турнира и т.п.),
 
Ещё
